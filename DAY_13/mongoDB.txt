// Insert Operations
db.students.insertOne({ name: "Eve", age: 21, scores: [88, 89], address: { city: "Houston", zip: 77001 } }); // Insert one document.
db.students.insertMany([{ name: "Tom", age: 23 }, { name: "Jerry", age: 19 }]); // Insert multiple documents.

// Find Operations
db.students.find(); // Find all documents.
db.students.find({ age: { $gt: 20 } }); // Find documents where age is greater than 20.
db.students.find({ "address.city": "New York" }); // Find documents with city as New York.
db.students.find({}, { name: 1, age: 1, _id: 0 }); // Project only name and age, exclude _id.
db.students.findOne({ name: "Alice" }); // Find one document by name.

// Update Operations
db.students.updateOne({ name: "John" }, { $set: { age: 22 } }); // Update John's age to 22.
db.students.updateMany({ age: { $lt: 21 } }, { $set: { scholarship: true } }); // Add scholarship field for students younger than 21.
db.students.updateOne({ name: "Alice" }, { $push: { scores: 95 } }); // Push 95 to Alice's scores array.
db.students.updateOne({ name: "Bob" }, { $pull: { scores: 75 } }); // Pull 75 from Bob's scores array.
db.students.updateMany({}, { $unset: { scholarship: "" } }); // Remove scholarship field from all documents.

// Delete Operations
db.students.deleteOne({ name: "Eve" }); // Delete the document where name is Eve.
db.students.deleteMany({ age: { $gt: 22 } }); // Delete documents where age is greater than 22.

// Atomic Operators
db.students.updateOne({ name: "John" }, { $inc: { age: 1 } }); // Increment John's age by 1.
db.students.updateOne({ name: "Alice" }, { $addToSet: { scores: 95 } }); // Add 95 to Alice's scores only if it doesn't exist.
db.students.updateOne({ name: "John" }, { $pullAll: { scores: [85, 90] } }); // Remove 85 and 90 from John's scores.

// Queries with Comparisons
db.students.find({ age: { $exists: true } }); // Find documents where age field exists.
db.students.find({ phone: { $exists: false } }); // Find documents where phone field does not exist.
db.students.find({ age: { $in: [25, 30] } }); // Find documents where age is 25 or 30.
db.students.find({ age: { $nin: [25, 30] } }); // Find documents where age is not 25 or 30.
db.students.find({ age: { $gt: 30 } }); // Find documents where age is greater than 30.
db.students.find({ age: { $lte: 28 } }); // Find documents where age is less than or equal to 28.
db.students.find({ name: { $ne: "Emma" } }); // Find documents where name is not Emma.
db.students.find({ name: { $eq: "Bob" } }); // Find documents where name is Bob.

// Combination of Operators
db.students.find({ $and: [{ age: { $gt: 25 } }, { "address.city": "Miami" }] }); // Find documents where age > 25 and city is Miami.
db.students.find({ $or: [{ age: { $lt: 30 } }, { scores: 92 }] }); // Find documents where age < 30 or scores include 92.
db.students.find({ "address.city": { $not: { $eq: "New York" } } }); // Find documents where city is not New York.

// Sort, Limit, and Skip

db.students.find().sort({ age: 1 }); // Sort documents by age in ascending order.
db.students.find().sort({ age: -1 }); // Sort documents by age in descending order.

db.students.find().limit(3); // Limit the result to 3 documents.
db.students.find().sort({ age: 1 }).limit(2); // Sort by age in ascending order and limit to 2 documents.

db.students.find().skip(2); // Skip the first 2 documents.
db.students.find().sort({ age: 1 }).skip(1).limit(2); // Sort by age, skip 1 document, and limit to 2.

// Counting and Aggregation

db.students.countDocuments(); // Count the total number of documents.
db.students.countDocuments({ age: { $gt: 20 } }); // Count documents where age is greater than 20.

db.students.aggregate([
  { $match: { age: { $gt: 20 } } }, // Match documents where age > 20.
  { $group: { _id: "$address.city", count: { $sum: 1 } } }, // Group by city and count the number of documents.
  { $sort: { count: -1 } } // Sort the grouped results by count in descending order.
]);

// Text Search (Requires text index)

db.students.createIndex({ name: "text" }); // Create a text index on the name field.
db.students.find({ $text: { $search: "John" } }); // Search for documents containing "John".

// Regex Search

db.students.find({ name: { $regex: /^A/i } }); // Find documents where the name starts with "A" (case-insensitive).

// Find Specific Number of Array Elements

db.students.find({ scores: { $size: 2 } }); // Find documents where the scores array has exactly 2 elements.

// Element Match in Arrays

db.students.find({ scores: { $elemMatch: { $gt: 85 } } }); // Find documents where at least one score is greater than 85.
