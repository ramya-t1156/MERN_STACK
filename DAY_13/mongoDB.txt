
# MongoDB CRUD Operations with Atomic Operators

## Description
This script demonstrates CRUD operations in MongoDB using the native `mongodb` Node.js driver, along with examples of atomic operators like `$push`, `$pull`, `$exists`, `$in`, `$nin`, `$gt`, `$lt`, `$gte`, `$lte`, `$ne`, and `$eq`.

## Prerequisites
- Install Node.js
- Install MongoDB locally or use MongoDB Atlas
- Install the MongoDB Node.js driver:
  ```bash
  npm install mongodb
  ```

## Usage
1. Start the MongoDB server.
2. Run the script:
   ```bash
   node mongodb_crud_operations.js
   ```

## Full Script with Comments
```javascript
const { MongoClient } = require("mongodb"); // Import MongoDB Client

// MongoDB connection URI and database name
const uri = "mongodb://localhost:27017"; // Change if using a different host/port
const dbName = "myDatabase"; // The name of the database

(async function () {
  const client = new MongoClient(uri); // Create a new MongoDB client

  try {
    await client.connect(); // Connect to the MongoDB server
    console.log("Connected to MongoDB");

    const db = client.db(dbName); // Switch to the specified database
    const users = db.collection("users"); // Create or access the "users" collection

    // Example: $push - Add an item to an array field
    await users.updateOne({ name: "John" }, { $push: { scores: 95 } });

    // Example: $pull - Remove an item from an array field
    await users.updateOne({ name: "Alice" }, { $pull: { scores: 85 } });

    // Example: $exists - Check if a field exists
    const existsResult = await users.find({ address: { $exists: true } }).toArray();
    console.log("Documents with address:", existsResult);

    // Example: $in - Match any value in an array
    const inResult = await users.find({ age: { $in: [25, 30] } }).toArray();
    console.log("Users aged 25 or 30:", inResult);

    // Example: $gt - Greater than a specific value
    const gtResult = await users.find({ age: { $gt: 30 } }).toArray();
    console.log("Users older than 30:", gtResult);

    // Example: $not - Match values not equal to a specific condition
    const notResult = await users.find({ "address.city": { $not: { $eq: "New York" } } }).toArray();
    console.log("Users not living in New York:", notResult);

  } catch (err) {
    console.error("Error:", err.message); // Handle errors
  } finally {
    await client.close(); // Close the connection
    console.log("MongoDB connection closed");
  }
})();
```

## Examples Covered
- Insert, Update, Delete, and Find operations
- Use of atomic operators such as `$push`, `$pull`, `$exists`, `$in`, and more.
